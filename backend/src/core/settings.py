"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
from datetime import timedelta

from django.conf.global_settings import STATICFILES_DIRS

from core.paths import BACKEND_DIR, BASE_DIR, PROJECT_DIR

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = str(os.environ.get("SECRET_KEY", "some-secret-key"))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DEBUG", 1))

ALLOWED_HOSTS = list(os.environ.get("ALLOWED_HOSTS", "localhost,127.0.0.1").split(","))


# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_simplejwt",
    "drf_spectacular",
    "corsheaders",
    "storages",
]

APP_APPS = []

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + APP_APPS

# Middleware

DJANGO_MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

THIRD_PARTY_MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
]

APP_MIDDLEWARE = []

MIDDLEWARE = THIRD_PARTY_MIDDLEWARE + DJANGO_MIDDLEWARE + APP_MIDDLEWARE

# Paths

ROOT_URLCONF = "core.urls"
# AUTH_USER_MODEL = "users.User"
WSGI_APPLICATION = "core.wsgi.application"

# Templates

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            PROJECT_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Cache
CACHES = {"default": {"BACKEND": "django.core.cache.backends.dummy.DummyCache"}}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# To use another database, set the DB_BACKEND environment variable.
if os.environ.get("DB_BACKEND", "postgresql").lower() == "postgresql":
    import dj_database_url

    DATABASES = {
        "default": dj_database_url.config(
            default=(
                f"postgres://{os.environ.pop('POSTGRES_USER', 'postgres')}:"
                f"{os.environ.pop('POSTGRES_PASSWORD', 'triplane')}@"
                f"{os.environ.pop('POSTGRES_HOST', 'localhost')}:"
                f"{os.environ.pop('POSTGRES_PORT', '5433')}/"
                f"{os.environ.pop('POSTGRES_DB', 'postgres-triplane')}"
            ),
            conn_max_age=600,
            conn_health_checks=True,
        ),
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": PROJECT_DIR / "database" / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://localhost:9000",
    "http://127.0.0.1:9000",
    "http://127.0.0.1:8000",
]
CORS_URLS_REGEX = r"^/api/.*$"

# s3
AWS_ACCESS_KEY_ID = os.environ.get("MINIO_ACCESS_KEY", "superuser")
AWS_SECRET_ACCESS_KEY = os.environ.get("MINIO_SECRET_KEY", "superuser")
AWS_STORAGE_BUCKET_NAME = os.environ.get("MINIO_BUCKET_NAME", "files")
AWS_S3_ENDPOINT_URL = "http://" + os.environ.get("MINIO_HOST_URL", "localhost:9000")
AWS_S3_USE_SSL = False

STATIC_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/static/"
MEDIA_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/media/"

# Storage
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "endpoint_url": AWS_S3_ENDPOINT_URL,
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
            "bucket_name": AWS_STORAGE_BUCKET_NAME,
        },
    },
    "staticfiles": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "endpoint_url": AWS_S3_ENDPOINT_URL,
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
            "bucket_name": AWS_STORAGE_BUCKET_NAME,
            "location": "static",
        },
    },
    "media": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "endpoint_url": AWS_S3_ENDPOINT_URL,
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
            "bucket_name": AWS_STORAGE_BUCKET_NAME,
            "location": "media",
        },
    },
}

# Rest framework
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "NON_FIELD_ERRORS_KEY": "errors",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "DEFAULT_VERSION": os.environ.get("API_VERSION", "v1"),
    "ALLOWED_VERSIONS": ["v1", "v2"],
}

# spectacular settings
SPECTACULAR_SETTINGS = {
    "TITLE": "My API",
    "DESCRIPTION": "API documentation",
    "VERSION": "1.0.0",
}

# jwt settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": os.environ.get("TOKEN_ALGORITHM", "HS256"),
}

# debug toolbar
ENABLE_DEBUG_TOOLBAR = DEBUG and "test" not in sys.argv
if ENABLE_DEBUG_TOOLBAR:
    MIDDLEWARE += [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ]
    INSTALLED_APPS += ("debug_toolbar",)
    INTERNAL_IPS = ["127.0.0.1", "localhost", "192.168.0.1", "10.0.2.2", "::1"]
    import socket

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS += [".".join(ip.split(".")[:-1] + ["1"]) for ip in ips]

    DEBUG_TOOLBAR_CONFIG = {
        "INTERCEPT_REDIRECTS": False,
        "DISABLE_PANELS": [
            "debug_toolbar.panels.redirects.RedirectsPanel",
        ],
        "SHOW_TEMPLATE_CONTEXT": True,
        "SHOW_TOOLBAR_CALLBACK": lambda request: True,
    }

# if DEBUG:
#     # Logging
#     import logging.config
#     import os
#
#     from django.utils.log import DEFAULT_LOGGING
#
#     # Disable Django's logging setup
#     LOGGING_CONFIG = None
#
#     LOGLEVEL = os.environ.get("LOGLEVEL", "info").upper()
#
#     logging.config.dictConfig(
#         {
#             "version": 1,
#             "disable_existing_loggers": False,
#             "formatters": {
#                 "default": {
#                     # exact format is not important, this is the minimum information
#                     "format": "%(asctime)s %(name)-12s %(levelname)-8s %(message)s",
#                 },
#                 "django.server": DEFAULT_LOGGING["formatters"]["django.server"],
#             },
#             "handlers": {
#                 # console logs to stderr
#                 "console": {
#                     "class": "logging.StreamHandler",
#                     "formatter": "default",
#                 },
#                 "django.server": DEFAULT_LOGGING["handlers"]["django.server"],
#             },
#             "loggers": {
#                 # default for all undefined Python modules
#                 "": {
#                     "level": "WARNING",
#                     "handlers": ["console"],
#                 },
#                 # Our application code
#                 "app": {
#                     "level": LOGLEVEL,
#                     "handlers": ["console"],
#                     # Avoid double logging because of root logger
#                     "propagate": False,
#                 },
#                 # Default runserver request logging
#                 "django.server": DEFAULT_LOGGING["loggers"]["django.server"],
#             },
#         }
#     )
